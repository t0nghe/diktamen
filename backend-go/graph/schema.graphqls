# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Message {
  success: Boolean!
  message: String
}

type LoginToken {
  success: Boolean!
  token: String #
}

input UserCredentials {
  username: String!
  password: String!
  email: String
}

type UserArticle {
  articleId: Int
  articleTitle: String!
  articleSentCount: Int!
  userFinishedIndex: Int
}

type SeenSent {
  sentId: Int
  indexInArticle: Int
  tryText: String!
}

type UnseenSentWord {
  length: Int!
  isCloze: Boolean!
  wordform: String!
  indexInSent: Int!
}

type TriedSentWord { # to be used in examineIncorrectSentences & displayDueSentences
  length: Int!
  isCloze: Boolean!
  wordform: String!
  indexInSent: Int!
  lastInputText: String!
  lastInputScore: Float!
}

type UnseenSent {
  sentId: Int
  indexInArticle: Int
  mediaUri: String
  sentWords: [UnseenSentWord]
}

input TrySentInput {
  sentId: Int!
  userInputJson: String!
}

type TrySentScore {
  success: Boolean # if the operation is successful
  score: Float # score of the user
}

type IncorrectSeenSent {
  sentId: Int
  indexInArticle: Int
  sentWords: [TriedSentWord]!
}

type DueSent {
  sentId: Int
  mediaUri: String
  sentWords: [TriedSentWord]!
}

type Mutation {
  userSignUp(input: UserCredentials!): Message!
  userLogIn(input: UserCredentials!): LoginToken!
  trySent(input: TrySentInput): TrySentScore!
}

type Query {
  listUserArticles: [UserArticle!]!
  listUserUnseenArticles: [UserArticle!]!
  displayUnseenSents(articleId: Int): [UnseenSent]
  # the two following queries are almost identical
  displaySeenSents(articleId: Int): [SeenSent]
  examineCorrectSents(articleId: Int): [SeenSent]
  # these two are quite similar too
  examineIncorrectSents(articleId: Int): [IncorrectSeenSent]
  displayDueSents(daysAhead: Int): [DueSent]
  randomInteger: Int
}