# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Message {
  success: Boolean!
  message: String
}

type LoginToken {
  success: Boolean!
  token: String # If unsucessful, token field will be empty.
}

input UserCredentials {
  username: String!
  passwordHash: String!
  email: String
}

input InputMessage {
  success: Boolean!
  message: String!
}

type UserArticle {
  articleId: ID!
  articleTitle: String!
  articleSentCount: Int!
  userNextUpIndex: String!
}

type Sentence {
  sentId: ID!
  sentIndexInArticle: Int!
  userTried: Boolean!
  userAttempt: [String]
}

type LenWordTuple {
  index: Int! # In some implementations of GraphQL engines, arrays are not ordered.
  letters: Int!
  wordForm: String!
}

type SentDetails {
  sentId: ID!
  mediaUri: String!
  wordForms: [LenWordTuple!]!
}

type FullArticle {
  articleId: ID!
  articleTitle: String!
  articleSentCount: Int!
  userNextUpIndex: String!
  sentences: [Sentence!]!
}

type SentScore {
  sentId: ID!
  mediaUri: String!
  originalText: String!
  comparison: String! # HTML
  wordCount: Int!
  incorrectCount: Int!
}

input UserAttempt { # username will be found in the token in http header
  sentId: ID!
  inputWordFormsJsonString: String! # To replace [LenWordTuple!]!, FIXME This is hacky. 
  # Reason for doing this is this error:
  # cannot use [LenWordTuple] as argument inputWordForms because OBJECT is not a valid input type
}

type Mutation {
  userSignUp(input: UserCredentials!): Message!
  userLogIn(input: UserCredentials!): LoginToken!
  userAttempt(input: UserAttempt): Message! # The user is not immediately given any feedback. This will only be a message for the frontend to consume.
  createDummyMessage(input: InputMessage): Message!
}

type Query {
  listUserArticles: [UserArticle!]!
  getUserFullArticle(articleId: ID!): FullArticle
  fetchSentAudio(sentId: String!): SentDetails
  scoreArticle(articleId: ID!): [SentScore!]!
  dummyMessage: [Message] # This is a dummy query.
}